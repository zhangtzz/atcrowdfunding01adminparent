<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
                             http://www.springframework.org/schema/tx https://www.springframework.org/schema/tx/spring-tx.xsd
                            http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    配置包的自动扫描-->
    <context:component-scan base-package="com.tianzhao.crowd.service"/>
<!--    配置事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
<!--    配置事务的切面-->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* *..*ServiceImpl.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
<!--    配置事务的通知-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
<!--        配置事务的属性-->
        <tx:attributes>
<!--            查询：配置只读属性，让数据库知道这是一个查询操作，能够进行一定的优化-->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
<!--            增删改的方法：配置事务的传播行为  ， 回滚异常-->
<!--                  propagation :
         默认值REQUIRED:表示当前方法必须工作在事务中，如果当前线程没有已经开启的事务，则自己开启新事务，如果已经有了那么就使用已有的这个事务
                      顾虑：用别人的事务有可能被“回滚”
         REQUIRES_NEW：建议使用的值， 表示不管当前线程有没有事务，都要自己开启事务，并在自己的事务中运行
                      好处：不会收到其他的事务的影响
        rollback-for属性：配置事务方法针对什么样的异常回滚
               默认：运行时异常回滚
               建议：编译时异常和运行时异常回滚
                            -->
            <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
            <tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>



        </tx:attributes>

    </tx:advice>


</beans>